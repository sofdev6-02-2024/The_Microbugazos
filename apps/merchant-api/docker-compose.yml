version: "3.8"

services:
  postgres:
    container_name: postgres_merchant_db
    image: postgres:latest
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - merchant-network

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    networks:
      - merchant-network

  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:4.0-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_WEB_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - merchant-network


  api_gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AUTH_JWT_AUTHORITY=${AUTH_JWT_AUTHORITY}
      - AUTH_JWT_AUDIENCE=${AUTH_JWT_AUDIENCE}
    volumes:
      - ./ApiGateway/appsettings.json:/app/appsettings.json
      - ./ApiGateway/RoutingConfiguration:/app/RoutingConfiguration
    networks:
      - merchant-network

  inventory_service:
    build:
      context: .
      dockerfile: InventoryService/Dockerfile
    ports:
      - "5200:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - POSTGRES_SQL_CONNECTION=${POSTGRES_SQL_CONNECTION_DOCKER}
    networks:
      - merchant-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  payment_service:
    build:
      context: .
      dockerfile: PaymentService/Dockerfile
    ports:
      - "5300:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - POSTGRES_SQL_CONNECTION=${POSTGRES_SQL_CONNECTION_DOCKER}
      - INVENTORY_SERVICE_ROUTE=${INVENTORY_SERVICE_ROUTE}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_SUCCESS_URL=${STRIPE_SUCCESS_URL}
      - STRIPE_FAILED_URL=${STRIPE_FAILED_URL}
    networks:
      - merchant-network
    depends_on:
      rabbitmq:
        condition: service_healthy

  user_service:
    build:
      context: .
      dockerfile: UserService/Dockerfile
    ports:
      - "5100:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - POSTGRES_SQL_CONNECTION=${POSTGRES_SQL_CONNECTION_DOCKER}
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
    networks:
      - merchant-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    
networks:
  merchant-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
